package expresswaysimulation.init;

import java.util.Random;

import expresswaysimulation.agents.Auto;
import repast.simphony.context.Context;
import repast.simphony.context.space.continuous.ContinuousSpaceFactory;
import repast.simphony.context.space.continuous.ContinuousSpaceFactoryFinder;
import repast.simphony.context.space.grid.GridFactory;
import repast.simphony.context.space.grid.GridFactoryFinder;
import repast.simphony.dataLoader.ContextBuilder;
import repast.simphony.space.continuous.ContinuousSpace;
import repast.simphony.space.continuous.SimpleCartesianAdder;
import repast.simphony.space.grid.Grid;
import repast.simphony.space.grid.GridBuilderParameters;
import repast.simphony.space.grid.SimpleGridAdder;
import repast.simphony.space.grid.WrapAroundBorders;

public class ExpresswaySimulationBuilder implements ContextBuilder<Object> {
	

	@Override
	public Context build(Context<Object> context) {
		context.setId ("ExpresswaySimulation");
		
		ContinuousSpaceFactory spaceFactory = ContinuousSpaceFactoryFinder.createContinuousSpaceFactory (null);
		ContinuousSpace<Object> space = spaceFactory.createContinuousSpace("space", context, 
		        new SimpleCartesianAdder<Object>(), new repast.simphony.space.continuous.WrapAroundBorders(), 50 , 50);
		
		GridFactory gridFactory = GridFactoryFinder.createGridFactory(null);
		Grid<Object> grid = gridFactory.createGrid("grid", context,
                new GridBuilderParameters<Object>(new WrapAroundBorders(),
                        new SimpleGridAdder<Object>(), true, 50, 50));
		
		for (int i = 0; i < 20; ++i) {
		    Auto auto = new Auto(space, grid);
		    context.add(auto);
		    
		    Random rndX = new Random();
		    int posX = rndX.nextInt(1);
		    
		    Random rndY = new Random();
		    int posY = rndY.nextInt(40);		   
		    
		    grid.moveTo(auto, 23 + 10 * posX, posY);
		    space.moveTo(auto, 23 + 10 * posX, posY);
		}
		
		return context ;
	}

}
