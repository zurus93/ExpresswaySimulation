package expresswaysimulation.init;

import expresswaysimulation.agents.Auto;
import repast.simphony.context.Context;
import repast.simphony.context.space.continuous.ContinuousSpaceFactory;
import repast.simphony.context.space.continuous.ContinuousSpaceFactoryFinder;
import repast.simphony.context.space.grid.GridFactory;
import repast.simphony.context.space.grid.GridFactoryFinder;
import repast.simphony.dataLoader.ContextBuilder;
import repast.simphony.space.continuous.ContinuousSpace;
import repast.simphony.space.continuous.NdPoint;
import repast.simphony.space.continuous.RandomCartesianAdder;
import repast.simphony.space.grid.Grid;
import repast.simphony.space.grid.GridBuilderParameters;
import repast.simphony.space.grid.SimpleGridAdder;
import repast.simphony.space.grid.WrapAroundBorders;

public class ExpresswaySimulationBuilder implements ContextBuilder<Object> {
	

	@Override
	public Context build(Context<Object> context) {
		context.setId ("ExpresswaySimulation");
		
		ContinuousSpaceFactory spaceFactory = ContinuousSpaceFactoryFinder.createContinuousSpaceFactory (null);
		ContinuousSpace<Object> space = spaceFactory.createContinuousSpace("space", context, 
		        new SimpleGridAdder<Object>(), new repast.simphony.space.continuous.WrapAroundBorders(), 50 , 50);
		
		GridFactory gridFactory = GridFactoryFinder.createGridFactory(null);
		Grid<Object> grid = gridFactory.createGrid("grid", context,
                new GridBuilderParameters<Object>(new WrapAroundBorders(),
                        new SimpleGridAdder<Object>(), true, 50, 50));
		
		for (int i = 0; i < 100; ++i) {
		    context.add(new Auto(space, grid));
		}
		
		for (Object obj : context) {
		    NdPoint pt = space.getLocation(obj);
		    grid.moveTo(obj, (int) pt.getX(), (int)pt.getY());
		}
		
		return context ;
	}

}
