package expresswaysimulation.agents;

import java.util.List;
import java.util.Random;

import repast.simphony.engine.schedule.ScheduledMethod;
import repast.simphony.query.space.grid.GridCell;
import repast.simphony.query.space.grid.GridCellNgh;
import repast.simphony.space.SpatialMath;
import repast.simphony.space.continuous.ContinuousSpace;
import repast.simphony.space.continuous.NdPoint;
import repast.simphony.space.grid.Grid;
import repast.simphony.space.grid.GridPoint;

/**
 * Class representing car agent.
 * It can move in straight line or change lane to left or right.
 * When it encounters the gate, it stops for payment and then moves on.
 */
public class Auto {
	
	private ContinuousSpace<Object> mSpace;
	private Grid<Object> mGrid;
	private int mVelocity;
	
	public Auto(ContinuousSpace<Object> space, Grid<Object> grid, int velocity) {
		mSpace = space;
		mGrid = grid;
		mVelocity = velocity;
	}
	
	@ScheduledMethod(start = 1, interval = 5000)
	public void step() {
		GridPoint gp = mGrid.getLocation(this);
		
		int newY = gp.getY() + mVelocity;

		GridCellNgh<Auto> nghCreator = new GridCellNgh<Auto>(mGrid, gp, Auto.class, 0, mVelocity);

		List<GridCell<Auto>> gridCells = nghCreator.getNeighborhood(true);

		for (int i = mVelocity; i < gridCells.size(); ++i) {
		    GridCell cell = gridCells.get(i);
		    
		    if (cell.size() > 0) {
		        newY = cell.getPoint().getY() - 1;
		        break;
		    }
		}
		
		moveTo(new GridPoint(gp.getX(), newY));		
	}
	
	public void moveTo(GridPoint pt) {
		
		if (!pt.equals(mGrid.getLocation(this))) {			
			mGrid.moveTo(this, (int) pt.getX(), (int) pt.getY());
			mSpace.moveTo(this, pt.getX(), pt.getY());
		}		
	}

}
